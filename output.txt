[Go to the source code for adc.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/adc.h)

### _Includes_

 * `#include "gpio.h"`
 * `#include "time.h"`

### _Functions_

 * [`InitializeADC`](https://github.com/ut-ras/Rasware2013/wiki/adc.h#initializeadc)
 * [`ADCRead`](https://github.com/ut-ras/Rasware2013/wiki/adc.h#adcread)
 * [`ADCBackgroundRead`](https://github.com/ut-ras/Rasware2013/wiki/adc.h#adcbackgroundread)
 * [`ADCReadContinuouslyUS`](https://github.com/ut-ras/Rasware2013/wiki/adc.h#adcreadcontinuouslyus)
 * [`ADCReadContinuously`](https://github.com/ut-ras/Rasware2013/wiki/adc.h#adcreadcontinuously)

### _Function Documention_

***

###`InitializeADC`

Initializes an ADC on a pin

`tADC *InitializeADC(tPin pin);`

**Parameters:**
 * `pin` Pin plugged into a servo

**Returns:**
 * Pointer to an initialized tADC, can be used by the ADCRead functions

**Notes:**
 * if ADC is not supported in hardware on the given pin, then a null pointer is returned

***

###`ADCRead`

Returns value on a pin used with the tADC provided

`float ADCRead(tADC *adc);`

**Parameters:**
 * `adc` Pointer to an initialized tADC, returned by InitializeADC

**Returns:**
 * Value measured as a percentage

**Notes:**
 * if the ADC is not continously reading, then the function will busy wait for the results

***

###`ADCBackgroundRead`

Sets up an ADC to be run in the background

`void ADCBackgroundRead(tADC *adc, tCallback callback, void *data);`

**Parameters:**
 * `adc` Pointer to an initialized tADC, returned by InitializeADC
 * `callback` Function called the next time the ADC updates, in which a call to ADCRead will return with the newly obtained value immediately
 * `data` Argument sent to the provided callback function whenever it is called

***

###`ADCReadContinuouslyUS`

Sets up an ADC to read indefinitly

`void ADCReadContinuouslyUS(tADC *adc, tTime us);`

**Parameters:**
 * `adc` Pointer to an initialized tADC, returned by InitializeADC
 * `us` Time between calls to read the ADC specified in micro seconds

**Notes:**
 * Any following calls to ADCRead will return the most recent value
 * If the passed time between calls is less than the time it takes for the ADC to complete, the ADC will read as fast as possible without overlap

***

###`ADCReadContinuously`

Sets up an ADC to read indefinitly

`void ADCReadContinuously(tADC *adc, float s);`

**Parameters:**
 * `adc` Pointer to an initialized tADC, returned by InitializeADC
 * `s` Time between calls to read the ADC specified in seconds

**Notes:**
 * Any following calls to ADCRead will return the most recent value
 * If the passed time between calls is less than the time it takes for the ADC to complete, the ADC will read as fast as possible without overlap

***

[Go to the source code for common.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/common.h)

### _Includes_

 * `#include <StellarisWare/inc/hw_types.h>`
 * `#include "uart.h"`

### _Functions_

 * [`InitializeMCU`](https://github.com/ut-ras/Rasware2013/wiki/common.h#initializemcu)
 * [`Dummy`](https://github.com/ut-ras/Rasware2013/wiki/common.h#dummy)

### _Function Documention_

***

###`InitializeMCU`

Sets up the LM4F to use RASLib

`void InitializeMCU(void);`

***

###`Dummy`

Function which does nothing

`void Dummy(void);`

***

[Go to the source code for encoder.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/encoder.h)

### _Includes_

 * `#include "gpio.h"`

### _Functions_

 * [`InitializeEncoder`](https://github.com/ut-ras/Rasware2013/wiki/encoder.h#initializeencoder)
 * [`GetEncoder`](https://github.com/ut-ras/Rasware2013/wiki/encoder.h#getencoder)
 * [`ResetEncoder`](https://github.com/ut-ras/Rasware2013/wiki/encoder.h#resetencoder)

### _Function Documention_

***

###`InitializeEncoder`

Initializes an encoder on a pair of pins

`tEncoder *InitializeEncoder(tPin a, tPin b, tBoolean invert);`

**Parameters:**
 * `a` Pin that the encoder A line should be plugged into
 * `b` Pin that the encoder B line should be plugged into
 * `invert` Flag to switch the direction that the encoder value is incremented 

**Returns:**
 * Pointer to a tEncoder used by the GetEncoder and ResetEncoder functions

***

###`GetEncoder`

Gets the accumulated value for an encoder

`signed long GetEncoder(tEncoder *enc);`

**Parameters:**
 * `enc` Pointer to a tEncoder that was returned by the InitializeEncoder function

**Returns:**
 * Accumulated encoder value

***

###`ResetEncoder`

Clears any ticks that have been accumulated for an encoder

`void ResetEncoder(tEncoder *enc);`

**Parameters:**
 * `enc` Pointer to a tEncoder that was returned by the InitializeEncoder function

***

[Go to the source code for gpio.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/gpio.h)

### _Includes_

 * `#include "common.h"`

### _Functions_

 * [`InitializeGPIO`](https://github.com/ut-ras/Rasware2013/wiki/gpio.h#initializegpio)
 * [`GetPin`](https://github.com/ut-ras/Rasware2013/wiki/gpio.h#getpin)
 * [`SetPin`](https://github.com/ut-ras/Rasware2013/wiki/gpio.h#setpin)
 * [`SetPinZ`](https://github.com/ut-ras/Rasware2013/wiki/gpio.h#setpinz)
 * [`PullUpPin`](https://github.com/ut-ras/Rasware2013/wiki/gpio.h#pulluppin)
 * [`PullDownPin`](https://github.com/ut-ras/Rasware2013/wiki/gpio.h#pulldownpin)
 * [`CallOnPin`](https://github.com/ut-ras/Rasware2013/wiki/gpio.h#callonpin)

### _Function Documention_

***

###`InitializeGPIO`

Initializes GPIO

`void InitializeGPIO(void);`

***

###`GetPin`

Gets pin value as a boolean

`tBoolean GetPin(tPin pin);`

**Parameters:**
 * `pin` The pin being checked

**Returns:**
 * The boolean value of given pin

***

###`SetPin`

Sets pin value as a boolean

`void SetPin(tPin pin, tBoolean val);`

**Parameters:**
 * `pin` The pin being set
 * `val` The boolean value the pin is being set to

***

###`SetPinZ`

Sets a pin into high impedance mode

`void SetPinZ(tPin pin);`

**Parameters:**
 * `pin` The pin being set to high impedance mode

***

###`PullUpPin`

Adds a weak pull up resistor to the pin

`void PullUpPin(tPin pin);`

**Parameters:**
 * `pin` The pin getting a weak pull up resistor 

***

###`PullDownPin`

Adds a weak pull down resistor to the pin

`void PullDownPin(tPin pin);`

**Parameters:**
 * `pin` The pin getting a weak pull down resistor

***

###`CallOnPin`

Registers a callback to be called when the pin's value changes, the state of the

`void CallOnPin(tCallback callback, void *data, tPin pin);`

**Parameters:**
 * `callback` Pointer to a function that will be called whenever the pin changes
 * `data` Pointer that will be sent as an argument to the callback everytime it
 * `pin` Pin being listened to

***

[Go to the source code for i2c.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/i2c.h)

### _Includes_

 * `#include "common.h"`
 * `#include "gpio.h"`

### _Functions_

 * [`InitializeI2C`](https://github.com/ut-ras/Rasware2013/wiki/i2c.h#initializei2c)
 * [`I2CSuccess`](https://github.com/ut-ras/Rasware2013/wiki/i2c.h#i2csuccess)
 * [`I2CBackgroundSend`](https://github.com/ut-ras/Rasware2013/wiki/i2c.h#i2cbackgroundsend)
 * [`I2CSend`](https://github.com/ut-ras/Rasware2013/wiki/i2c.h#i2csend)
 * [`I2CBackgroundReceive`](https://github.com/ut-ras/Rasware2013/wiki/i2c.h#i2cbackgroundreceive)
 * [`I2CReceive`](https://github.com/ut-ras/Rasware2013/wiki/i2c.h#i2creceive)
 * [`I2CBackgroundRequest`](https://github.com/ut-ras/Rasware2013/wiki/i2c.h#i2cbackgroundrequest)
 * [`I2CRequest`](https://github.com/ut-ras/Rasware2013/wiki/i2c.h#i2crequest)

### _Function Documention_

***

###`InitializeI2C`

Initializes an I2C module on a pair of pins

`tI2C *InitializeI2C(tPin sda, tPin scl);`

**Parameters:**
 * `sda` [TODO: describe sda]
 * `scl` [TODO: describe scl]

**Returns:**
 * Pointer to a I2C module used by other i2c functions

***

###`I2CSuccess`

Checks if the previous i2c transaction was successful

`tBoolean I2CSuccess(tI2C *i2c);`

**Parameters:**
 * `i2c` An initialized I2C module, which is returned by InitializeI2C

**Returns:**
 * true if the previous i2c transaction was successful

***

###`I2CBackgroundSend`

Sends data to an I2C address

`void I2CBackgroundSend(tI2C *i2c, unsigned char addr, const unsigned char *data, unsigned int len, tCallback callback, void *cbdata);`

**Parameters:**
 * `i2c` An initialized I2C module, which is returned by InitializeI2C
 * `addr` I2C address where data is being sent
 * `data` Pointer to array of byes being sent
 * `len` Number of bytes in data array
 * `callback` Function that will be called when the data has been sent
 * `cbdata` Argument sent to the callback whenever it is called

***

###`I2CSend`

Sends data to an I2C address

`tBoolean I2CSend(tI2C *i2c, unsigned char addr, const unsigned char *data, unsigned int len);`

**Parameters:**
 * `i2c` An initialized I2C module, which is returned by InitializeI2C
 * `addr` I2C address where data is being sent
 * `data` Pointer to array of byes being sent
 * `len` Number of bytes in data array

**Returns:**
 * true if successful

***

###`I2CBackgroundReceive`

Receives data from an I2C address

`void I2CBackgroundReceive(tI2C *i2c, unsigned char addr, unsigned char *data, unsigned int len, tCallback callback, void *cbdata);`

**Parameters:**
 * `i2c` An initialized I2C module, which is returned by InitializeI2C
 * `addr` I2C address where data is being received
 * `data` Pointer to array of byes to store the data received
 * `len` Number of bytes allocated in the data array
 * `callback` Function that will be called when all of the data is received
 * `cbdata` Argument sent to the callback whenever it is called

***

###`I2CReceive`

Receives data from an I2C address

`tBoolean I2CReceive(tI2C *i2c, unsigned char addr, unsigned char* data, unsigned int len);`

**Parameters:**
 * `i2c` An initialized I2C module, which is returned by InitializeI2C
 * `addr` I2C address where data is being received
 * `data` Pointer to array of byes to store the data received
 * `len` Number of bytes allocated in the data array

**Returns:**
 * true if successful

***

###`I2CBackgroundRequest`

Requests data from an I2C address (nonblocking). This is the same as two sequential send and recieve calls but takes place in the internal state machine.

`void I2CBackgroundRequest(tI2C *i2c, unsigned char addr, const unsigned char *sendData, unsigned int sendLen, unsigned char *recData, unsigned int recLen, tCallback callback, void *cbdata);`

**Parameters:**
 * `i2c` An initialized I2C module, which is returned by InitializeI2C
 * `addr` I2C address where data is being requested
 * `sendData` Pointer to array of byes being sent
 * `sendLen` Number of bytes allocated in the send data array
 * `recData` Pointer to array of byes to store the data received
 * `recLen` Number of bytes allocated in the receive data array
 * `callback` Function that will be called when all of the data is received
 * `cbdata` Argument sent to the callback whenever it is called

***

###`I2CRequest`

Requests data from an I2C address (blocking). This is the same as two sequential send and recieve calls but takes place in the internal state machine.

`tBoolean I2CRequest(tI2C *i2c, unsigned char addr, const unsigned char *sendData, unsigned int sendLen, unsigned char *recData, unsigned int recLen);`

**Parameters:**
 * `i2c` An initialized I2C module, which is returned by InitializeI2C
 * `addr` I2C address where data is being requested
 * `sendData` Pointer to array of byes being sent
 * `sendLen` Number of bytes allocated in the send data array
 * `recData` Pointer to array of byes to store the data received
 * `recLen` Number of bytes allocated in the receive data array

**Returns:**
 * true if successful

***

[Go to the source code for linesensor.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/linesensor.h)

### _Includes_

 * `#include "time.h"`
 * `#include "i2c.h"`

### _Functions_

 * [`InitializeI2CLineSensor`](https://github.com/ut-ras/Rasware2013/wiki/linesensor.h#initializei2clinesensor)
 * [`InitializeGPIOLineSensor`](https://github.com/ut-ras/Rasware2013/wiki/linesensor.h#initializegpiolinesensor)
 * [`LineSensorRead`](https://github.com/ut-ras/Rasware2013/wiki/linesensor.h#linesensorread)
 * [`LineSensorReadArray`](https://github.com/ut-ras/Rasware2013/wiki/linesensor.h#linesensorreadarray)
 * [`LineSensorBackgroundRead`](https://github.com/ut-ras/Rasware2013/wiki/linesensor.h#linesensorbackgroundread)
 * [`LineSensorReadContinuouslyUS`](https://github.com/ut-ras/Rasware2013/wiki/linesensor.h#linesensorreadcontinuouslyus)
 * [`LineSensorReadContinuously`](https://github.com/ut-ras/Rasware2013/wiki/linesensor.h#linesensorreadcontinuously)

### _Function Documention_

***

###`InitializeI2CLineSensor`

Initializes a line sensor with an address on an i2c bus

`tLineSensor *InitializeI2CLineSensor(tI2C *i2c, unsigned int address);`

**Parameters:**
 * `i2c` Pointer to an initialized tI2C, returned by InitializeI2C
 * `address` 2-bit value determined by the solder jumpers on the board

**Returns:**
 * Pointer to an initialized tLineSensor, can be used by the LineSensorRead functions

***

###`InitializeGPIOLineSensor`

Initializes a GPIO line sensor on the provided pins

`tLineSensor *InitializeGPIOLineSensor(tPin p0, tPin p1, tPin p2, tPin p3, tPin p4, tPin p5, tPin p6, tPin p7);`

**Parameters:**
 * `p0` Pin plugged into sensor 0
 * `p1` Pin plugged into sensor 1
 * `p2` Pin plugged into sensor 2
 * `p3` Pin plugged into sensor 3
 * `p4` Pin plugged into sensor 4
 * `p5` Pin plugged into sensor 5
 * `p6` Pin plugged into sensor 6
 * `p7` Pin plugged into sensor 7

**Returns:**
 * Pointer to an initialized tGPIOLineSensor, can be used by the GPIOLineSensorRead functions

***

###`LineSensorRead`

Returns the line sensor value measured as a bit-packed byte

`unsigned char LineSensorRead(tLineSensor *ls, float threshold);`

**Parameters:**
 * `ls` Pointer to an initialized tLineSensor, returned by InitializeLineSensor
 * `threshold` If the value read from a single IR on the linesensor is above this threshold, it is converted to 1 and then packed into the byte

**Returns:**
 * Value measured from the line sensors as a bit-packed byte, where each bit of the byte corresponds to the value of a single IR senor on the line sensor array

**Notes:**
 * if the line sensor is not continously reading, then the function will busy wait for the results
 * if there is an error in the I2C module, the returned value will be all ones

***

###`LineSensorReadArray`

Puts the values read from the line sensor into an array of 8 floats

`tBoolean LineSensorReadArray(tLineSensor *ls, float *array);`

**Parameters:**
 * `ls` Pointer to an initialized tLineSensor, returned by InitializeLineSensor
 * `array` Array of 8 percentages, each corresponding to an IR sensor in the line sensor array

**Returns:**
 * true if successful, otherwise it returns false and fills the array with infinities

**Notes:**
 * if the line sensor is not continously reading, then the function will busy wait for the results

***

###`LineSensorBackgroundRead`

Sets up a line sensor to be run in the background

`void LineSensorBackgroundRead(tLineSensor *ls, tCallback callback, void *data);`

**Parameters:**
 * `snr` Pointer to an initialized tLineSensor, returned by InitializeLineSensor
 * `callback` Function called the next time the line sensor read completes, in which a call to LineSensorRead will return with the newly obtained value immediately
 * `data` Argument sent to the provided callback function whenever it is called

***

###`LineSensorReadContinuouslyUS`

Sets up an line sensor to be read indefinitly

`void LineSensorReadContinuouslyUS(tLineSensor *ls, tTime us);`

**Parameters:**
 * `snr` Pointer to an initialized tLineSensor, returned by InitializeLineSensor
 * `us` Time between calls to read the line sensor in microseconds

**Notes:**
 * Any following calls to LineSensorRead will return the most recent value
 * If the passed time between calls is less than the time it takes for the line sensor read to complete, the line sensor will fire as fast as possible without overlap

***

###`LineSensorReadContinuously`

Sets up an line sensor to be read indefinitly

`void LineSensorReadContinuously(tLineSensor *ls, float s);`

**Parameters:**
 * `snr` Pointer to an initialized tLineSensor, returned by InitializeLineSensor
 * `s` Time between calls to read the line sensor in seconds

**Notes:**
 * Any following calls to LineSensorRead will return the most recent value
 * If the passed time between calls is less than the time it takes for the line sensor read to complete, the line sensor will fire as fast as possible without overlap

***

[Go to the source code for motor.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/motor.h)

### _Includes_

 * `#include "gpio.h"`

### _Functions_

 * [`InitializeMotor`](https://github.com/ut-ras/Rasware2013/wiki/motor.h#initializemotor)
 * [`SetMotor`](https://github.com/ut-ras/Rasware2013/wiki/motor.h#setmotor)

### _Function Documention_

***

###`InitializeMotor`

Initializes a motor on a pair of pins

`tMotor *InitializeMotor(tPin a, tPin b, tBoolean brake, tBoolean invert);`

**Parameters:**
 * `a` Pin that should plug into the IN1 motor line
 * `b` Pin that should plug into the IN2 motor line
 * `brake` Flag to enable breaking when the motor is set to 0 speed
 * `invert` Flag to switch the direction that the motor will turn

**Returns:**
 * Pointer to an initialized tMotor, can be used by the SetMotor function

***

###`SetMotor`

Sets a motor speed

`void SetMotor(tMotor *mtr, float speed);`

**Parameters:**
 * `mtr` Pointer to an initialized tMotor, returned by InitializeMotor
 * `speed` Float on range [-1, 1] where -1 means maximum backward speed and 1 means maximum forward speed

***

[Go to the source code for pwm.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/pwm.h)

### _Includes_

 * `#include "gpio.h"`

### _Functions_

 * [`InitializePWM`](https://github.com/ut-ras/Rasware2013/wiki/pwm.h#initializepwm)
 * [`SetPWM`](https://github.com/ut-ras/Rasware2013/wiki/pwm.h#setpwm)

### _Function Documention_

***

###`InitializePWM`

Initializes a PWM signal for a pin

`tPWM *InitializePWM(tPin pin, float freq);`

**Parameters:**
 * `pin` Pin that will output a PWM signal
 * `freq` Frequency of the signal, must be specified in hertz

**Returns:**
 * Pointer to an initialized tPWM, can be used by the SetPWM function

**Notes:**
 * If the number of frequencies passes the number of available modules, which is currently 12, then a null pointer is returned

***

###`SetPWM`

Sets a PWM duty cycle and phase

`void SetPWM(tPWM *pwm, float duty, float phase);`

**Parameters:**
 * `pwm` Initialized tPWM, returned by InitializePWM
 * `duty` Duty cycle of signal, specified as a percentage
 * `phase` Phase of signal, specified as a percentage

***

[Go to the source code for servo.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/servo.h)

### _Includes_

 * `#include "gpio.h"`
 * `#include "pwm.h"`

### _Functions_

 * [`InitializeServo`](https://github.com/ut-ras/Rasware2013/wiki/servo.h#initializeservo)
 * [`SetServo`](https://github.com/ut-ras/Rasware2013/wiki/servo.h#setservo)

### _Function Documention_

***

###`InitializeServo`

Initializes a servo on a pin

`tServo *InitializeServo(tPin pin);`

**Parameters:**
 * `pin` Pin plugged into a servo

**Returns:**
 * Pointer to an initialized tServo, can be used by the SetServo function

***

###`SetServo`

Sets a servo to a specified position

`void SetServo(tServo *servo, float value);`

**Parameters:**
 * `servo` Pointer to an initialized tServo, returned by InitializeServo
 * `value` Float on range [0,1] representing the desired position of the servo

**Notes:**
 * Servo output is 50hz with 2.5% to 12.5% duty cycle, centered at 7.5%. This function sets a servo value, with 0.0 being 2.5% and 1.0 being 12.5%

***

[Go to the source code for sonar.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/sonar.h)

### _Includes_

 * `#include "gpio.h"`
 * `#include "time.h"`

### _Functions_

 * [`InitializeSonar`](https://github.com/ut-ras/Rasware2013/wiki/sonar.h#initializesonar)
 * [`SonarRead`](https://github.com/ut-ras/Rasware2013/wiki/sonar.h#sonarread)
 * [`SonarBackgroundRead`](https://github.com/ut-ras/Rasware2013/wiki/sonar.h#sonarbackgroundread)
 * [`SonarReadContinuouslyUS`](https://github.com/ut-ras/Rasware2013/wiki/sonar.h#sonarreadcontinuouslyus)
 * [`SonarReadContinuously`](https://github.com/ut-ras/Rasware2013/wiki/sonar.h#sonarreadcontinuously)

### _Function Documention_

***

###`InitializeSonar`

Initializes a sonar on a pair of pin

`tSonar *InitializeSonar(tPin trigger, tPin echo);`

**Parameters:**
 * `trigger` Pin plugged into the sonar's tigger line
 * `echo` Pin plugged into the sonar's echo line

**Returns:**
 * Pointer to an initialized tSonar, can be used by the SonarRead functions

***

###`SonarRead`

Returns the distance measured from the sonar

`float SonarRead(tSonar *snr);`

**Parameters:**
 * `snr` Pointer to an initialized tSonar, returned by InitializeSonar

**Returns:**
 * The distance measured as a percentage of maximum range of the sonar. If no response is detected, a value of infinity is returned. 

**Notes:**
 * if the sonar is not continously reading, then the function will busy wait for the results

***

###`SonarBackgroundRead`

Sets up an sonar to be run in the background

`void SonarBackgroundRead(tSonar *snr, tCallback callback, void *data);`

**Parameters:**
 * `snr` Pointer to an initialized tSonar, returned by InitializeSonar
 * `callback` Function called the next time the sonar read completes, in which a call to SonarRead will return with the newly obtained value immediately
 * `data` Argument sent to the provided callback function whenever it is called

***

###`SonarReadContinuouslyUS`

Sets up an sonar to read indefinitly

`void SonarReadContinuouslyUS(tSonar *snr, tTime us);`

**Parameters:**
 * `snr` Pointer to an initialized tSonar, returned by InitializeSonar
 * `us` Time between calls to read the sonar in micro seconds

**Notes:**
 * Any following calls to SonarRead will return the most recent value
 * If the passed time between calls is less than the time it takes for the sonar read to complete, the sonar will fire as fast as possible without overlap

***

###`SonarReadContinuously`

Sets up an sonar to read indefinitly

`void SonarReadContinuously(tSonar *snr, float s);`

**Parameters:**
 * `snr` Pointer to an initialized tSonar, returned by InitializeSonar
 * `s` Time between calls to read the sonar in seconds

**Notes:**
 * Any following calls to SonarRead will return the most recent value
 * If the passed time between calls is less than the time it takes for the sonar read to complete, the sonar will fire as fast as possible without overlap

***

[Go to the source code for time.h](https://github.com/ut-ras/Rasware2013/tree/master/RASLib/inc/time.h)

### _Includes_

 * `#include "common.h"`

### _Functions_

 * [`InitializeSystemTime`](https://github.com/ut-ras/Rasware2013/wiki/time.h#initializesystemtime)
 * [`GetTimeUS`](https://github.com/ut-ras/Rasware2013/wiki/time.h#gettimeus)
 * [`GetTime`](https://github.com/ut-ras/Rasware2013/wiki/time.h#gettime)
 * [`CallInUS`](https://github.com/ut-ras/Rasware2013/wiki/time.h#callinus)
 * [`CallIn`](https://github.com/ut-ras/Rasware2013/wiki/time.h#callin)
 * [`CallEveryUS`](https://github.com/ut-ras/Rasware2013/wiki/time.h#calleveryus)
 * [`CallEvery`](https://github.com/ut-ras/Rasware2013/wiki/time.h#callevery)
 * [`CallStop`](https://github.com/ut-ras/Rasware2013/wiki/time.h#callstop)
 * [`WaitUS`](https://github.com/ut-ras/Rasware2013/wiki/time.h#waitus)
 * [`Wait`](https://github.com/ut-ras/Rasware2013/wiki/time.h#wait)

### _Function Documention_

***

###`InitializeSystemTime`

Initializes a system timer with microsecond resolution

`void InitializeSystemTime(void);`

***

###`GetTimeUS`

Outputs system time

`tTime GetTimeUS(void);`

**Returns:**
 * System time in microseconds

***

###`GetTime`

Outputs system time

`float GetTime(void);`

**Returns:**
 * System time in seconds

***

###`CallInUS`

Schedules a callback function to be called in given time

`int CallInUS(tCallback callback, void *data, tTime us);`

**Parameters:**
 * `callback` Function that will be called
 * `data` Argument sent to the callback function when it's called
 * `us` Period between calls, specified in microseconds

**Returns:**
 * ID that can be used to stop the call with CallStop

***

###`CallIn`

Schedules a callback function to be called in given time

`int CallIn(tCallback callback, void *data, float s);`

**Parameters:**
 * `callback` Function that will be called
 * `data` Argument sent to the callback function when it's called
 * `s` Period between calls, specified in seconds

**Returns:**
 * ID that can be used to stop the call with CallStop

***

###`CallEveryUS`

Schedules a callback function to be called repeatedly

`int CallEveryUS(tCallback callback, void *data, tTime us);`

**Parameters:**
 * `callback` Function that is called repeatedly
 * `data` Argument sent to the callback function each time it's called
 * `us` Period between calls, specified in microseconds

**Returns:**
 * ID that can be used to stop the call with CallStop

***

###`CallEvery`

Schedules a callback function to be called repeatedly

`int CallEvery(tCallback callback, void *data, float s);`

**Parameters:**
 * `callback` Function that is called repeatedly
 * `data` Argument sent to the callback function each time it's called
 * `s` Period between calls, specified in seconds

**Returns:**
 * ID that can be used to stop the call with CallStop

***

###`CallStop`

Stops a pending call based on the passed identifier

`void CallStop(int id);`

**Parameters:**
 * `id` Value returned by CallEvery and CallIn functions

***

###`WaitUS`

Busy waits for given time

`void WaitUS(tTime ms);`

**Parameters:**
 * `ms` Amount of time to wait, specified in milliseconds

***

###`Wait`

Busy waits for given time

`void Wait(float s);`

**Parameters:**
 * `s` Amount of time to wait, specified in seconds

***

